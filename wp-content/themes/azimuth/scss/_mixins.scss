
%ui-base {
  display: inline-flex;
  width: auto;
  justify-content: center;
  align-items: center;
  opacity: 1;
  background: transparent;
  line-height: 1;
  text-decoration: none;
  outline: none;
  color: inherit;
  border: none;
  padding: 0;
  margin: 0;
  svg {
    fill: currentColor;
  }
  &:hover {
    text-decoration: none;
  }
}

%ui-disabled {
  opacity: var(--theme-transition--opacity);
  cursor: no-drop;
  pointer-events: none;
  &:focus,
  &:hover {
    background: initial;
    color: initial;
  }
}

%ui-input {
  border: none;
  border-radius: 0;
  &[type="search"] {
    -webkit-appearance: none;
  }
}

%ui-transition {
  transition:
    background var(--theme-transition--duration),
    border var(--theme-transition--duration),
    color var(--theme-transition--duration),
    opacity var(--theme-transition--duration),
    transform var(--theme-transition--duration);
}

@mixin placeholder {
  &::-webkit-input-placeholder { @content }
  &:-moz-placeholder           { @content }
  &::-moz-placeholder          { @content }
  &:-ms-input-placeholder      { @content }
}

@mixin clearfix {
	clear: both;
	&:after{
		visibility: hidden;
		display: block;
		font-size: 0;
		content: " ";
		clear: both;
		height: 0;
  }
}

@mixin keyframes( $animation-name ) {
  @keyframes #{$animation-name} { @content; }
}

@mixin animation( $str ) {
  animation: #{$str};
}

@mixin greysacle( $value ) {
  filter:#{"grayscale(#{$value})"};
}

@mixin brightness( $value ) {
  filter: brightness( $value );
}

@function lighten( $color, $percentage ) {
  @return mix( white, $color, $percentage );
}

@function darken( $color, $percentage ) {
  @return mix( black, $color, $percentage );
}

//////////////////////////////////////////////////////////
////  UI/UX | Breakpoints
//////////////////////////////////////////////////////////

@mixin breakpoint( $size ) {

  @if $size == sm {
	  @media (min-width: map-get( $grid-breakpoints, sm )) { @content; }
  }

  @else if $size == md {
    @media (min-width: map-get( $grid-breakpoints, md )) { @content; }
  }

  @else if $size == lg {
    @media (min-width: map-get( $grid-breakpoints, lg )) { @content; }
  }

  @else if $size == xl {
    @media (min-width: map-get( $grid-breakpoints, xl )) { @content; }
  }

  @else if $size == xxl {
    @media (min-width: map-get( $grid-breakpoints, xxl )) { @content; }
  }

}

//////////////////////////////////////////////////////////
////  Typography | Body Copy
//////////////////////////////////////////////////////////

@mixin body-copy( $font-size-modifier: 1, $line-height: 1.2, $font-weight: normal ) {

  font-size: calc( var(--theme-body-copy) * #{$font-size-modifier} );
  font-weight: $font-weight;
  line-height: $line-height;

  @include breakpoint(sm) {
    font-size: calc( var(--theme-body-copy--sm) * #{$font-size-modifier} );
  } // min width sm

  @include breakpoint(md) {
    font-size: calc( var(--theme-body-copy--md) * #{$font-size-modifier} );
  } // min width md

  @include breakpoint(lg) {
    font-size: calc( var(--theme-body-copy--lg) * #{$font-size-modifier} );
  } // min width lg

  @include breakpoint(xl) {
    font-size: calc( var(--theme-body-copy--xl) * #{$font-size-modifier} );
  } // min width xl

  @include breakpoint(xxl) {
    font-size: calc( var(--theme-body-copy--xxl) * #{$font-size-modifier} );
  } // min width xxl

}
